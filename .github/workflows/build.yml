name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.21'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false
    
    - name: Install PC/SC dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcsclite-dev pcscd pcsc-tools
    
    - name: Run tests
      run: go test -v ./internal/... ./cmd/...
    
    - name: Build test (current platform)
      run: |
        CGO_ENABLED=1 go build -v ./cmd/cfs-spool
        CGO_ENABLED=1 go build -v ./cmd/web-server

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            name: linux-amd64
            display_name: "Linux"
            deps: sudo apt-get update && sudo apt-get install -y libpcsclite-dev pcscd pcsc-tools
          - os: macos-13
            goos: darwin
            goarch: amd64
            name: macos-intel
            display_name: "macOS Intel"
            deps: brew install pcsc-lite
          - os: macos-14
            goos: darwin
            goarch: arm64
            name: macos-apple-silicon
            display_name: "macOS Apple Silicon"
            deps: brew install pcsc-lite
          - os: windows-latest
            goos: windows
            goarch: amd64
            name: windows-amd64
            display_name: "Windows"
            deps: echo "Windows PC/SC drivers will be needed"
            ext: .exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false
    
    - name: Install dependencies
      run: ${{ matrix.deps }}
      shell: bash
    
    - name: Install zip (Unix)
      if: matrix.goos != 'windows'
      run: |
        if [[ "${{ matrix.goos }}" == "linux" ]]; then
          sudo apt-get install -y zip
        elif [[ "${{ matrix.goos }}" == "darwin" ]]; then
          # zip já está disponível no macOS
          echo "zip already available on macOS"
        fi
      shell: bash
    
    - name: Build binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" \
          -o cfs-spool-app-${{ matrix.name }}${{ matrix.ext }} ./cmd/web-server
        go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" \
          -o cfs-spool-cli-${{ matrix.name }}${{ matrix.ext }} ./cmd/cfs-spool
        go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" \
          -o cfs-spool-web-${{ matrix.name }}${{ matrix.ext }} ./cmd/web-server
      shell: bash
    
    - name: Create package
      run: |
        mkdir -p release/cfs-spool-${{ matrix.name }}
        cp cfs-spool-*-${{ matrix.name }}${{ matrix.ext }} release/cfs-spool-${{ matrix.name }}/
        cp -r web release/cfs-spool-${{ matrix.name }}/
        cp README.md release/cfs-spool-${{ matrix.name }}/
        
        # Create platform-specific install script
        if [[ "${{ matrix.goos }}" == "linux" ]]; then
          cat > release/cfs-spool-${{ matrix.name }}/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing CFS Spool for Linux..."
        echo "1. Install PC/SC: sudo apt-get install pcscd pcsc-tools libpcsclite1"
        echo "2. Connect your RFID reader"
        echo "3. Run: ./cfs-spool-app-${{ matrix.name }}"
        echo "4. Browser will open automatically at: http://localhost:8080"
        echo "CLI usage: ./cfs-spool-cli-${{ matrix.name }} read-tag"
        EOF
          chmod +x release/cfs-spool-${{ matrix.name }}/install.sh
        elif [[ "${{ matrix.goos }}" == "darwin" ]]; then
          cat > release/cfs-spool-${{ matrix.name }}/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing CFS Spool for macOS..."
        echo "1. Install PC/SC: brew install pcsc-lite (optional, usually included)"
        echo "2. Connect your RFID reader"
        echo "3. Run: ./cfs-spool-app-${{ matrix.name }}"
        echo "4. Browser will open automatically at: http://localhost:8080"
        echo "CLI usage: ./cfs-spool-cli-${{ matrix.name }} read-tag"
        EOF
          chmod +x release/cfs-spool-${{ matrix.name }}/install.sh
        elif [[ "${{ matrix.goos }}" == "windows" ]]; then
          cat > release/cfs-spool-${{ matrix.name }}/install.bat << 'EOF'
        @echo off
        echo Installing CFS Spool for Windows...
        echo 1. Install PC/SC drivers for your RFID reader
        echo 2. Connect your RFID reader
        echo 3. Run: cfs-spool-app-${{ matrix.name }}.exe
        echo 4. Browser will open automatically at: http://localhost:8080
        echo CLI usage: cfs-spool-cli-${{ matrix.name }}.exe read-tag
        EOF
        fi
        
        chmod +x release/cfs-spool-${{ matrix.name }}/cfs-spool-* 2>/dev/null || true
      shell: bash
    
    - name: Create archive (Unix)
      if: matrix.goos != 'windows'
      run: |
        cd release
        zip -r ../cfs-spool-${{ matrix.name }}.zip cfs-spool-${{ matrix.name }}/
      shell: bash
    
    - name: Create archive (Windows)
      if: matrix.goos == 'windows'
      run: |
        Compress-Archive -Path "release/cfs-spool-${{ matrix.name }}" -DestinationPath "cfs-spool-${{ matrix.name }}.zip"
      shell: powershell
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cfs-spool-${{ matrix.name }}
        path: cfs-spool-${{ matrix.name }}.zip

  build-native-installers:
    needs: build
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: macos
            installer_type: dmg
            artifact_name: "cfs-spool-macos-apple-silicon"
          - os: ubuntu-latest
            platform: linux
            installer_type: appimage
            artifact_name: "cfs-spool-linux-amd64"
          - os: windows-latest
            platform: windows
            installer_type: exe
            artifact_name: "cfs-spool-windows-amd64"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download platform artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts
    
    - name: Prepare installer workspace
      run: |
        mkdir -p installer-workspace
        echo "Looking for ZIP files..."
        find artifacts -name "*.zip" -type f || echo "No ZIP files found"
        ls -la artifacts/ || echo "No artifacts directory"
        
        # Extract the specific ZIP found
        if [ -f "$(find artifacts -name "*.zip" | head -1)" ]; then
          echo "Extracting ZIP file..."
          find artifacts -name "*.zip" | head -1 | xargs -I {} unzip {} -d installer-workspace/
          echo "Contents after extraction:"
          ls -la installer-workspace/
        else
          echo "ERROR: No ZIP files found in artifacts"
          exit 1
        fi
      shell: bash
    
    # macOS DMG Creation
    - name: Create macOS DMG
      if: matrix.platform == 'macos'
      run: |
        # Install create-dmg
        brew install create-dmg imagemagick
        
        # Generate icons from SVG
        echo "Generating app icons..."
        mkdir -p iconset.iconset
        
        # Generate PNG icons in different sizes
        sizes=(16 32 64 128 256 512 1024)
        for size in "${sizes[@]}"; do
          echo "Generating ${size}x${size} icon..."
          magick -background none assets/icons/cfs-spool.svg -resize ${size}x${size} iconset.iconset/icon_${size}x${size}.png
          
          # Generate 2x versions for retina
          if [ $size -le 512 ]; then
            double_size=$((size * 2))
            magick -background none assets/icons/cfs-spool.svg -resize ${double_size}x${double_size} iconset.iconset/icon_${size}x${size}@2x.png
          fi
        done
        
        # Create .icns file
        iconutil -c icns iconset.iconset -o app.icns
        
        # Generate DMG background
        magick -background none assets/dmg-background.svg -resize 600x400 dmg-background.png
        
        # Create app bundle structure
        mkdir -p "CFS Spool.app/Contents/MacOS"
        mkdir -p "CFS Spool.app/Contents/Resources"
        
        # Copy binaries
        find installer-workspace -name "cfs-spool-app-*" ! -name "*.zip" | head -1 | xargs -I {} cp {} "CFS Spool.app/Contents/MacOS/cfs-spool"
        find installer-workspace -name "cfs-spool-cli-*" ! -name "*.zip" | head -1 | xargs -I {} cp {} "CFS Spool.app/Contents/MacOS/cfs-spool-cli"
        
        # Copy web assets
        cp -r installer-workspace/*/web "CFS Spool.app/Contents/Resources/"
        
        # Copy app icon
        cp app.icns "CFS Spool.app/Contents/Resources/app.icns"
        
        # Create Info.plist with icon reference
        cat > "CFS Spool.app/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>cfs-spool</string>
            <key>CFBundleIdentifier</key>
            <string>com.creality.cfs-spool</string>
            <key>CFBundleName</key>
            <string>CFS Spool</string>
            <key>CFBundleDisplayName</key>
            <string>CFS Spool</string>
            <key>CFBundleVersion</key>
            <string>${{ github.ref_name }}</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ github.ref_name }}</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleIconFile</key>
            <string>app</string>
            <key>LSUIElement</key>
            <false/>
            <key>LSApplicationCategoryType</key>
            <string>public.app-category.utilities</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSAppTransportSecurity</key>
            <dict>
                <key>NSAllowsLocalNetworking</key>
                <true/>
            </dict>
            <key>NSHumanReadableCopyright</key>
            <string>© 2025 Creality. All rights reserved.</string>
        </dict>
        </plist>
        EOF
        
        # Make executable
        chmod +x "CFS Spool.app/Contents/MacOS/cfs-spool"
        chmod +x "CFS Spool.app/Contents/MacOS/cfs-spool-cli"
        
        # Create DMG with drag-to-Applications functionality
        create-dmg \
          --volname "CFS Spool ${{ github.ref_name }}" \
          --background "dmg-background.png" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "CFS Spool.app" 150 200 \
          --hide-extension "CFS Spool.app" \
          --app-drop-link 450 200 \
          --text-size 16 \
          "cfs-spool-${{ github.ref_name }}.dmg" \
          "CFS Spool.app"
    
    # Linux AppImage Creation
    - name: Create Linux AppImage
      if: matrix.platform == 'linux'
      run: |
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y wget file libpcsclite1 libpcsclite-dev
        
        # Download linuxdeploy and AppImageTool
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/lib
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        mkdir -p AppDir/usr/share/cfs-spool
        
        # Copy binaries
        find installer-workspace -name "cfs-spool-app-*" ! -name "*.zip" | head -1 | xargs -I {} cp {} AppDir/usr/bin/cfs-spool
        find installer-workspace -name "cfs-spool-cli-*" ! -name "*.zip" | head -1 | xargs -I {} cp {} AppDir/usr/bin/cfs-spool-cli
        
        # Copy web assets
        cp -r installer-workspace/*/web AppDir/usr/share/cfs-spool/
        
        # Copy PC/SC libraries
        cp /usr/lib/x86_64-linux-gnu/libpcsclite.so.1 AppDir/usr/lib/ || true
        cp /lib/x86_64-linux-gnu/libpcsclite.so.1 AppDir/usr/lib/ || true
        
        # Create desktop file
        cat > AppDir/usr/share/applications/cfs-spool.desktop << 'EOF'
        [Desktop Entry]
        Type=Application
        Name=CFS Spool
        Comment=Creality CFS RFID Tag Reader
        Exec=cfs-spool
        Icon=cfs-spool
        Categories=Utility;
        Terminal=false
        EOF
        
        # Create simple icon (text-based)
        cat > AppDir/usr/share/icons/hicolor/256x256/apps/cfs-spool.svg << 'EOF'
        <svg width="256" height="256" xmlns="http://www.w3.org/2000/svg">
          <rect width="256" height="256" fill="#1976d2"/>
          <text x="128" y="140" font-family="Arial" font-size="48" fill="white" text-anchor="middle">CFS</text>
        </svg>
        EOF
        
        # Make executable
        chmod +x AppDir/usr/bin/cfs-spool
        chmod +x AppDir/usr/bin/cfs-spool-cli
        
        # Create AppImage with bundled libraries
        export LD_LIBRARY_PATH="$PWD/AppDir/usr/lib:$LD_LIBRARY_PATH"
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage --library AppDir/usr/lib/libpcsclite.so.1 || true
        
        # Fallback: try without library bundling
        if [ ! -f *.AppImage ]; then
          echo "Trying without library bundling..."
          ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage
        fi
        
        # Rename to proper name
        mv CFS_Spool*.AppImage "cfs-spool-${{ github.ref_name }}.AppImage" || mv *.AppImage "cfs-spool-${{ github.ref_name }}.AppImage"
    
    # Windows Installer Creation
    - name: Create Windows Installer
      if: matrix.platform == 'windows'
      run: |
        Write-Host "Starting Windows installer creation..."
        
        # Install NSIS
        Write-Host "Installing NSIS..."
        choco install nsis -y
        
        # Create installer directory structure
        Write-Host "Creating directories..."
        New-Item -ItemType Directory -Force -Path "installer\bin"
        New-Item -ItemType Directory -Force -Path "installer\web"
        
        # Debug: List what we have
        Write-Host "Contents of installer-workspace:"
        Get-ChildItem installer-workspace -Recurse
        
        # Copy files with better error handling
        Write-Host "Copying application files..."
        $appFile = Get-ChildItem installer-workspace -Recurse -Filter "cfs-spool-app-*.exe" | Select-Object -First 1
        if ($appFile) {
            Write-Host "Found app: $($appFile.FullName)"
            Copy-Item $appFile.FullName "installer\bin\cfs-spool.exe" -Force
        } else {
            Write-Host "ERROR: No app file found"
            exit 1
        }
        
        $cliFile = Get-ChildItem installer-workspace -Recurse -Filter "cfs-spool-cli-*.exe" | Select-Object -First 1
        if ($cliFile) {
            Write-Host "Found CLI: $($cliFile.FullName)"
            Copy-Item $cliFile.FullName "installer\bin\cfs-spool-cli.exe" -Force
        } else {
            Write-Host "ERROR: No CLI file found"
            exit 1
        }
        
        # Copy web files
        $webDir = Get-ChildItem installer-workspace -Recurse -Directory | Where-Object { Test-Path "$($_.FullName)\web" } | Select-Object -First 1
        if ($webDir) {
            Write-Host "Copying web files from: $($webDir.FullName)"
            Copy-Item -Recurse "$($webDir.FullName)\web\*" "installer\web\" -Force
        } else {
            Write-Host "ERROR: No web directory found"
            exit 1
        }
        
        Write-Host "Files copied successfully. Creating NSIS installer..."
        
        # Create simple NSIS script
        @"
        !define APPNAME "CFS Spool"
        !define COMPANYNAME "Creality"
        !define DESCRIPTION "Creality CFS RFID Tag Reader"
        
        RequestExecutionLevel admin
        InstallDir "`$PROGRAMFILES\CFS Spool"
        Name "CFS Spool"
        OutFile "cfs-spool-${{ github.ref_name }}-installer.exe"
        
        Page components
        Page directory
        Page instfiles
        
        Section "CFS Spool" SecMain
            SectionIn RO
            SetOutPath `$INSTDIR
            File /r "installer\*"
            WriteUninstaller "`$INSTDIR\uninstall.exe"
            CreateDirectory "`$SMPROGRAMS\CFS Spool"
            CreateShortCut "`$SMPROGRAMS\CFS Spool\CFS Spool.lnk" "`$INSTDIR\bin\cfs-spool.exe"
            CreateShortCut "`$DESKTOP\CFS Spool.lnk" "`$INSTDIR\bin\cfs-spool.exe"
        SectionEnd
        
        Section "Uninstall"
            Delete "`$SMPROGRAMS\CFS Spool\CFS Spool.lnk"
            Delete "`$DESKTOP\CFS Spool.lnk"
            RMDir "`$SMPROGRAMS\CFS Spool"
            Delete "`$INSTDIR\uninstall.exe"
            RMDir /r "`$INSTDIR"
        SectionEnd
        "@ | Out-File "installer.nsi" -Encoding UTF8
        
        # Debug: show the created script
        Write-Host "Created NSIS script:"
        Get-Content "installer.nsi"
        
        # Build installer
        Write-Host "Building installer with NSIS..."
        & "C:\Program Files (x86)\NSIS\makensis.exe" "installer.nsi"
        
        Write-Host "Windows installer creation completed."
      shell: powershell
    
    - name: Upload native installer
      uses: actions/upload-artifact@v4
      with:
        name: native-installer-${{ matrix.platform }}
        path: |
          *.dmg
          *.AppImage
          *-installer.exe

  release:
    needs: [build, build-native-installers]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Organize release files
      run: |
        mkdir -p release-files
        
        # ZIP packages
        find artifacts -name "*.zip" | while read file; do
          cp "$file" release-files/
        done
        
        # Native installers
        find artifacts -name "*.dmg" -o -name "*.AppImage" -o -name "*-installer.exe" | while read file; do
          cp "$file" release-files/
        done
        
        ls -la release-files/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🎉 CFS Spool ${{ github.ref_name }}
          
          ### 📦 Instaladores Nativos (Recomendado para usuários finais)
          
          #### 🍎 macOS
          - **macOS Universal**: `cfs-spool-${{ github.ref_name }}.dmg` 
            - Arraste para Applications
            - Execute "CFS Spool"
            - Acesse: http://localhost:8080
          
          #### 🐧 Linux  
          - **Linux Portable**: `cfs-spool-${{ github.ref_name }}.AppImage`
            - `chmod +x cfs-spool-*.AppImage`
            - `./cfs-spool-*.AppImage`
            - Acesse: http://localhost:8080
          
          #### 🪟 Windows
          - **Windows Installer**: `cfs-spool-${{ github.ref_name }}-installer.exe`
            - Execute como Administrador
            - Siga o assistente de instalação
            - Atalho criado na Área de Trabalho
            - Acesse: http://localhost:8080
          
          ### 📦 Pacotes ZIP (Para desenvolvedores)
          
          #### 🐧 Linux
          - **Linux 64-bit**: `cfs-spool-linux-amd64.zip`
          
          #### 🍎 macOS
          - **macOS Intel**: `cfs-spool-macos-intel.zip`
          - **macOS Apple Silicon**: `cfs-spool-macos-apple-silicon.zip`
          
          #### 🪟 Windows
          - **Windows 64-bit**: `cfs-spool-windows-amd64.zip`
          
          ### 🚀 Quick Start (Instaladores Nativos)
          
          #### 🍎 macOS:
          1. Download: `cfs-spool-${{ github.ref_name }}.dmg`
          2. Abra o DMG e arraste "CFS Spool" para Applications
          3. Conecte seu leitor RFID ACR122U
          4. Execute "CFS Spool" pelo Launchpad
          5. Acesse: http://localhost:8080
          
          #### 🐧 Linux:
          1. Download: `cfs-spool-${{ github.ref_name }}.AppImage`
          2. `chmod +x cfs-spool-*.AppImage`
          3. Conecte seu leitor RFID ACR122U
          4. Execute: `./cfs-spool-*.AppImage`
          5. Acesse: http://localhost:8080
          
          #### 🪟 Windows:
          1. Download: `cfs-spool-${{ github.ref_name }}-installer.exe`
          2. Execute como Administrador
          3. Siga o assistente de instalação
          4. Conecte seu leitor RFID ACR122U
          5. Execute "CFS Spool" pelo atalho da Área de Trabalho
          6. Acesse: http://localhost:8080
          
          ### ⚙️ Pré-requisitos
          
          - **RFID Reader**: ACR122U ou compatível
          - **Windows**: Drivers PC/SC automáticos
          - **macOS**: PC/SC incluído no sistema
          - **Linux**: `sudo apt install pcscd pcsc-tools`
          
          ### 🆘 Support
          
          - Issues: https://github.com/robertocorreajr/cfs_spool/issues
          - Documentation: https://github.com/robertocorreajr/cfs_spool#readme
        files: |
          release-files/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
