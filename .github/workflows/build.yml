name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.21'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false
    
    - name: Install PC/SC dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcsclite-dev pcscd pcsc-tools
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Build test (current platform)
      run: |
        CGO_ENABLED=1 go build -v ./cmd/cfs-spool
        CGO_ENABLED=1 go build -v ./cmd/web-server

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            name: linux-amd64
            deps: sudo apt-get update && sudo apt-get install -y libpcsclite-dev pcscd pcsc-tools
          - os: macos-13
            goos: darwin
            goarch: amd64
            name: macos-amd64
            deps: brew install pcsc-lite
          - os: macos-14
            goos: darwin
            goarch: arm64
            name: macos-arm64
            deps: brew install pcsc-lite
          - os: windows-latest
            goos: windows
            goarch: amd64
            name: windows-amd64
            deps: echo "Windows PC/SC drivers will be needed"
            ext: .exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false
    
    - name: Install dependencies
      run: ${{ matrix.deps }}
      shell: bash
    
    - name: Build binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" \
          -o cfs-spool-cli-${{ matrix.name }}${{ matrix.ext }} ./cmd/cfs-spool
        go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" \
          -o cfs-spool-web-${{ matrix.name }}${{ matrix.ext }} ./cmd/web-server
      shell: bash
    
    - name: Create package
      run: |
        mkdir -p release/cfs-spool-${{ matrix.name }}
        cp cfs-spool-*-${{ matrix.name }}${{ matrix.ext }} release/cfs-spool-${{ matrix.name }}/
        cp -r web release/cfs-spool-${{ matrix.name }}/
        cp README.md release/cfs-spool-${{ matrix.name }}/
        
        # Create platform-specific install script
        if [[ "${{ matrix.goos }}" == "linux" ]]; then
          cat > release/cfs-spool-${{ matrix.name }}/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing CFS Spool for Linux..."
        echo "1. Install PC/SC: sudo apt-get install pcscd pcsc-tools libpcsclite1"
        echo "2. Connect your RFID reader"
        echo "3. Run: ./cfs-spool-web-${{ matrix.name }}"
        echo "4. Open: http://localhost:8080"
        echo "CLI usage: ./cfs-spool-cli-${{ matrix.name }} read-tag"
        EOF
          chmod +x release/cfs-spool-${{ matrix.name }}/install.sh
        elif [[ "${{ matrix.goos }}" == "darwin" ]]; then
          cat > release/cfs-spool-${{ matrix.name }}/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing CFS Spool for macOS..."
        echo "1. Install PC/SC: brew install pcsc-lite"
        echo "2. Connect your RFID reader"
        echo "3. Run: ./cfs-spool-web-${{ matrix.name }}"
        echo "4. Open: http://localhost:8080"
        echo "CLI usage: ./cfs-spool-cli-${{ matrix.name }} read-tag"
        EOF
          chmod +x release/cfs-spool-${{ matrix.name }}/install.sh
        elif [[ "${{ matrix.goos }}" == "windows" ]]; then
          cat > release/cfs-spool-${{ matrix.name }}/install.bat << 'EOF'
        @echo off
        echo Installing CFS Spool for Windows...
        echo 1. Install PC/SC drivers for your RFID reader
        echo 2. Connect your RFID reader
        echo 3. Run: cfs-spool-web-${{ matrix.name }}.exe
        echo 4. Open: http://localhost:8080
        echo CLI usage: cfs-spool-cli-${{ matrix.name }}.exe read-tag
        EOF
        fi
        
        chmod +x release/cfs-spool-${{ matrix.name }}/cfs-spool-* 2>/dev/null || true
      shell: bash
    
    - name: Create archive (Unix)
      if: matrix.goos != 'windows'
      run: |
        cd release
        tar -czf ../cfs-spool-${{ matrix.name }}.tar.gz cfs-spool-${{ matrix.name }}/
      shell: bash
    
    - name: Create archive (Windows)
      if: matrix.goos == 'windows'
      run: |
        Compress-Archive -Path "release/cfs-spool-${{ matrix.name }}" -DestinationPath "cfs-spool-${{ matrix.name }}.zip"
      shell: powershell
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cfs-spool-${{ matrix.name }}
        path: cfs-spool-${{ matrix.name }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Organize release files
      run: |
        mkdir -p release-files
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-files/
        done
        ls -la release-files/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## üéâ CFS Spool ${{ github.ref_name }}
          
          ### üì¶ Downloads por Plataforma
          
          #### üêß Linux
          - **Linux AMD64**: `cfs-spool-linux-amd64.tar.gz`
          
          #### üçé macOS
          - **macOS Intel**: `cfs-spool-macos-amd64.tar.gz`
          - **macOS Apple Silicon**: `cfs-spool-macos-arm64.tar.gz`
          
          #### ü™ü Windows
          - **Windows 64-bit**: `cfs-spool-windows-amd64.zip`
          
          ### üöÄ Quick Start
          
          #### Linux/macOS:
          1. Download e extraia o pacote da sua plataforma
          2. Execute o script de instala√ß√£o: `./install.sh`
          3. Conecte seu leitor RFID ACR122U
          4. Execute: `./cfs-spool-web-[platform]`
          5. Abra: http://localhost:8080
          
          #### Windows:
          1. Download e extraia: `cfs-spool-windows-amd64.zip`
          2. Execute: `install.bat` para ver instru√ß√µes
          3. Conecte seu leitor RFID ACR122U
          4. Execute: `cfs-spool-web-windows-amd64.exe`
          5. Abra: http://localhost:8080
          
          ### üÜò Support
          
          - Issues: https://github.com/robertocorreajr/cfs_spool/issues
          - Documentation: https://github.com/robertocorreajr/cfs_spool#readme
        files: |
          release-files/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
